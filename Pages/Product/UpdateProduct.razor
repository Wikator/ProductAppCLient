@page "/products/update/{id}"
@inject IProductService ProductService
@inject NavigationManager NavigationManager
@inject IMapper Mapper
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<PageTitle>Update Product</PageTitle>

<h3>Update Product</h3>

@if (Model is null)
{
    if (FetchErrorMessage is null)
    {
        @* <div class="alert alert-info"> *@
        @*     Loading... *@
        @* </div> *@
    }
    else
    {
        <ErrorMessage Message="@FetchErrorMessage" />
    }
}
else
{
    <ErrorMessage Message="@UpdateErrorMessage" />

    <EditForm Model="Model" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />
        <label for="name">Name</label>
        <div class="col-sm-10 mb-2">
            <InputText @bind-Value="@Model.Name" class="form-control" id="name"/>
            <ValidationMessage For="@(() => Model.Name)"/>
        </div>
    
        <label for="description">Description</label>
        <div class="col-sm-10 mb-2">
            <InputText @bind-Value="@Model.Description" class="form-control" id="description"/>
            <ValidationMessage For="@(() => Model.Description)"/>
        </div>
    
        <label for="price">Price</label>
        <div class="col-sm-10 mb-2">
            <InputNumber @bind-Value="@Model.Price" class="form-control" id="price"/>
            <ValidationMessage For="@(() => Model.Price)"/>
        </div>
    
        <label for="amount">Amount</label>
        <div class="col-sm-10 mb-2">
            <InputNumber @bind-Value="@Model.Amount" class="form-control" id="amount"/>
            <ValidationMessage For="@(() => Model.Amount)"/>
        </div>
    
        <button type="submit" class="btn btn-primary" disabled="@(!context.Validate() || Submitting)">Update!</button>
    </EditForm>
}

@code {
    
    [Parameter] public string? Id { get; set; }
    
    private ProductUpsertDto? Model { get; set; }
    
    private string? FetchErrorMessage { get; set; }
    private string? UpdateErrorMessage { get; set; }
    
    private bool Submitting { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (Id is null)
            {
                NavigationManager.NavigateTo("/products");
            }
            else
            {
                var response = await ProductService.GetProductAsync(Id);
                
                if (response is null)
                {
                    NavigationManager.NavigateTo("/products");
                }
                else
                {
                    Model = Mapper.Map<ProductUpsertDto>(response);
                }
            }
        }
        catch (ApiException ex)
        {
            FetchErrorMessage = ex.Message;
        }
    }

    private async Task HandleSubmit()
    {
        try
        {
            if (Id is null || Model is null)
            {
                NavigationManager.NavigateTo("/products");
            }
            else
            {
                Submitting = true;
                await ProductService.UpdateProductAsync(Id, Model);
                NavigationManager.NavigateTo($"/products"); 
            }
        }
        catch (ApiException ex)
        {
            Submitting = false;
            UpdateErrorMessage = $"Server responded with status code: {ex.StatusCode} and message: {ex.Message}";
        }
    }

}