@page "/products/create"
@inject IProductService ProductService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Create Product</PageTitle>

<h3>Create Product</h3>

<ErrorMessage Message="@ErrorMessage" />

<EditForm Model="Model" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <label for="name">Name</label>
    <div class="col-sm-10 mb-2">
        <InputText @bind-Value="@Model.Name" class="form-control" id="name"/>
        <ValidationMessage For="@(() => Model.Name)"/>
    </div>
    
    <label for="description">Description</label>
    <div class="col-sm-10 mb-2">
        <InputText @bind-Value="@Model.Description" class="form-control" id="description"/>
        <ValidationMessage For="@(() => Model.Description)"/>
    </div>
    
    <label for="price">Price</label>
    <div class="col-sm-10 mb-2">
        <InputNumber @bind-Value="@Model.Price" class="form-control" id="price"/>
        <ValidationMessage For="@(() => Model.Price)"/>
    </div>
    
    <label for="amount">Amount</label>
    <div class="col-sm-10 mb-2">
        <InputNumber @bind-Value="@Model.Amount" class="form-control" id="amount"/>
        <ValidationMessage For="@(() => Model.Amount)"/>
    </div>
    
    <button type="submit" class="btn btn-primary" disabled="@(!context.Validate() || IsSubmitting)">Create!</button>
</EditForm>

@code {
    
    private ProductUpsertDto Model { get; } = new();
    private string? ErrorMessage { get; set; }
    private bool IsSubmitting { get; set; }
    
    private async Task HandleSubmit()
    {
        try
        {
            IsSubmitting = true;
            await ProductService.CreateProductAsync(Model);
            NavigationManager.NavigateTo($"/products");
        }
        catch (ApiException ex)
        {
            IsSubmitting = false;
            ErrorMessage = $"Server responded with status code: {ex.StatusCode} and message: {ex.Message}";
        }
    }

}
